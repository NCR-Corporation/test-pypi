name: Labeled Events
on:
  pull_request:
    types: [labeled, opened, synchronize, reopened]
env:
  INTERNAL_REPO: NCR-Corporation/gsre-internal
  TESTS_PASSED: tests-passed
  SONAR_FAILED: sonar-failed
  COV_FAILED: coverity-failed
  LICENSE_LABEL: has-license
  VERSION_LABEL: updated-version
  TESTPYPI_UPLOADED: testpypi-uploaded
  TESTPYPI_UPLOAD_FAILED: testpypi-upload-failed
jobs:
  print:
    runs-on: ubuntu-latest
    steps:
      - name: Print context
        run: echo "${{toJSON(github)}}"
  verify:
    name: Verify author/labeler
    runs-on: ubuntu-latest
    outputs:
      run_sonar: ${{ steps.jobs.outputs.run_sonar }}
      tests_passed: ${{ steps.jobs.outputs.tests_passed }}
      testpypi_upload: ${{ steps.jobs.outputs.testpypi_upload }}
      testpypi_result: ${{ steps.jobs.outputs.testpypi_result }}
    steps:
      - name: Get actors permissions
        if: github.event.action == 'labeled'
        run: |
          perm=$(gh api "/repos/${{github.repository}}/collaborators/${{github.actor}}/permission" --jq '.permission')
          if [[ "$perm" != 'admin' ]]; then
            echo "User does not have appropriate rights to label the pr"
            gh pr edit ${{github.event.number}} --remove-label "${{github.event.label.name}}" -R ${{github.repository}}
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{secrets.GA_PAT }}
      - name: Determine which jobs to run
        id: jobs
        run: |
          # Sonar
          echo "${{github.event.label.name}}"
          RUN_SONAR=false
          if ${{contains(github.event.pull_request.labels.*.name, env.TESTS_PASSED)}} || ${{contains(github.event.pull_request.labels.*.name, env.SONAR_FAILED)}} || ${{contains(github.event.pull_request.labels.*.name, env.COV_FAILED)}}; then
            echo "Test label found in existing labels"
            RUN_SONAR=true
          elif [[ ${{github.event.action}} == 'labeled' && ( '${{github.event.label.name}}' == '${{env.TESTS_PASSED}}' || '${{github.event.label.name}}' == '${{env.COV_FAILED}}' || '${{github.event.label.name}}' == '${{env.SONAR_FAILED}}') ]]; then
            echo "Test label found in current label"
            RUN_SONAR=true
          else
            echo "No test labels found"
          fi
          TESTS_PASSED=""
          if [ ${RUN_SONAR} == 'true' ]; then
            if ${{contains(github.event.pull_request.labels.*.name, env.TESTS_PASSED)}} || ( [ '${{github.event.action}}' == 'labeled' ] && [ '${{github.event.label.name}}' == '${{env.TESTS_PASSED}}' ] ); then
              TESTS_PASSED=true
            elif [[ ( ${{contains(github.event.pull_request.labels.*.name, env.SONAR_FAILED)}} || ${{contains(github.event.pull_request.labels.*.name, env.COV_FAILED)}} ) || ( '${{github.event.action}}' == 'labeled' && ( '${{github.event.label.name}}' == '${{env.COV_FAILED}}' || '${{github.event.label.name}}' == '${{env.SONAR_FAILED}}' )) ]]; then
              TESTS_PASSED=false
            fi
          fi

          # Test Pypi Upload
          TESTPYPI_UPLOAD="false"
          if [[ [ ${{github.event.action}} == 'labeled' ] && ( [ '${{github.event.label.name}}' == ${{env.TESTPYPI_UPLOADED}} ] || [ '${{github.event.label.name}}' == ${{env.TESTPYPI_UPLOAD_FAILED}} ] ) ]]; then
            TESTPYPI_UPLOAD="true"
          elif [[ [ '${{github.event.action}}' == 'synchronize' ] && ${{contains(github.event.pull_request.labels.*.name, env.TESTPYPI_UPLOADED)}} ]]; then
            TESTPYPI_UPLOAD="true"
          fi

          TESTPYPI_RESULT=""
          if [[ '${{github.event.label.name}}' == ${{env.TESTPYPI_UPLOADED}} || ${{contains(github.event.pull_request.labels.*.name, env.TESTPYPI_UPLOADED)}} ]]; then
            TESTPYPI_RESULT="success"
          elif [[ '${{github.event.label.name}}' == ${{env.TESTPYPI_UPLOAD_FAILED}} ]]; then
            TESTPYPI_RESULT="failure"
          elif [[ '${{github.event.action}}' == 'synchronize' && ${{contains(github.event.pull_request.labels.*.name, env.TESTPYPI_UPLOADED)}} ]]; then
            TESTPYPI_RESULT="stale"
          fi

          echo "::set-output name=run_sonar::$RUN_SONAR"
          echo "::set-output name=tests_passed::$TESTS_PASSED"
          echo "::set-output name=testpypi_upload::$TESTPYPI_UPLOAD"
          echo "::set-output name=testpypi_result::$TESTPYPI_RESULT"
          echo "RUN_SONAR = $RUN_SONAR TESTS_PASSED=$TESTS_PASSED TESTPYPI_UPLOAD=$TESTPYPI_UPLOAD TESTPYPI_RESULT=$TESTPYPI_RESULT"
  sonar-cover:
    name: Sonar and Coverity Scans
    needs: [verify]
    runs-on: ubuntu-latest
    # if: ${{(contains(github.event.pull_request.labels.*.name, env.TESTS_PASSED) || contains(github.event.pull_request.labels.*.name, env.SONAR_FAILED) || contains(github.event.pull_request.labels.*.name, env.COV_FAILED)) || (github.event.action == 'labeled' && (github.event.label.name == env.TESTS_PASSED || github.event.label.name == env.COV_FAILED || github.event.label.name == env.SONAR_FAILED ))}}
    if: needs.verify.outputs.run_sonar == 'true'
    steps:
      - name: Print env vars
        run: echo "${{env.TESTS_PASSED}}"
      - name: Tests Passed
        # if: contains(github.event.pull_request.labels.*.name, env.TESTS_PASSED) || (github.event.action == 'labeled' && github.event.label.name == env.TESTS_PASSED)
        if: needs.verify.outputs.tests_passed == 'true'
        run: echo "Success"
      - name: One or more tests have failed
        # if: (contains(github.event.pull_request.labels.*.name, env.SONAR_FAILED) || contains(github.event.pull_request.labels.*.name, env.COV_FAILED)) || (github.event.action == 'labeled' && (github.event.label.name == env.COV_FAILED || github.event.label.name == env.SONAR_FAILED))
        if: needs.verify.outputs.tests_passed == 'false'
        run: |
          echo "Failure"
          exit 1
  upload-triggered:
    name: Upload to TestPypi server
    needs: [verify]
    runs-on: ubuntu-latest
    if: github.event.action == 'labeled' && github.event.label.name == 'upload2testpypi'
    steps:
      - name: Prevent upload before tests have passed
        if: (!contains(github.event.pull_request.labels.*.name, env.TESTS_PASSED))
        run: echo "Cannot upload to testpypi until all tests have passed" && exit 1
      - name: Prevent upload without license
        if: (!contains(github.event.pull_request.labels.*.name, env.LICENSE_LABEL))
        run: echo "Cannot upload to testpypi without a license" && exit 1
      - name: Prevent upload without updated version number
        if: (!contains(github.event.pull_request.labels.*.name, env.VERSION_LABEL))
        run: echo "Cannot upload to testpypi updating the version number" && exit 1
      - name: Trigger Upload
        run: gh workflow run pypi_upload.yml -R $INTERNAL_REPO -f repo=${{github.repository}} -f branch=${GITHUB_REF#refs/heads/} -f pr_num=${{github.event.number}} -f pypi_server='test'
        env:
          GITHUB_TOKEN: ${{secrets.GA_PAT }}
  testpypi-upload:
    name: Verify Successful Upload to testpypi
    needs: [verify]
    runs-on: ubuntu-latest
#     if: (github.event.action == 'labeled' && (github.event.label.name == env.TESTPYPI_UPLOADED || github.event.label.name == env.TESTPYPI_UPLOAD_FAILED )) || (github.event.action == 'synchronize' && contains(github.event.pull_request.labels.*.name, env.TESTPYPI_UPLOADED))
    if: needs.verify.outputs.testpypi_upload == 'true'
    steps:
      - name: Test Uploaded Package
        # if: (github.event.label.name == env.TESTPYPI_UPLOADED || contains(github.event.pull_request.labels.*.name, env.TESTPYPI_UPLOADED))
        if: needs.verify.outputs.testpypi_result == 'success'
        run: |
          # TODO add some tests of the package and fail this if they don't pass
          echo "Success"
      - name: Upload Failed
        # if: github.event.label.name == env.TESTPYPI_UPLOAD_FAILED
        if: needs.verify.outputs.testpypi_result == 'failure'
        run: |
          echo "Failure"
          exit 1
      - name: Stale testpypi
        # if: github.event.action == 'synchronize' && contains(github.event.pull_request.labels.*.name, env.TESTPYPI_UPLOADED)
        if: needs.verify.outputs.testpypi_result == 'stale'
        run: |
          echo "testpypi upload made stale by new commit"
          gh pr edit ${{github.event.number}} --remove-label env.TESTPYPI_UPLOADED -R ${{github.repository}}
          exit 1
        env:
          GITHUB_TOKEN: ${{secrets.GA_PAT }}
